export interface DeploymentResult {
  success: boolean
  url?: string
  error?: string
  repositoryUrl?: string
}

export class DeploymentService {
  private githubToken: string

  constructor() {
    this.githubToken = process.env.GITHUB_TOKEN || ''
  }

  async deployToGitHub(website: {
    html: string
    css: string
    js: string
    title: string
  }): Promise<DeploymentResult> {
    try {
      if (!this.githubToken) {
        return {
          success: false,
          error: 'GitHub token not configured'
        }
      }

      const repoName = `flowforge-${Date.now()}`
      const fullHTML = this.generateFullHTML(website)

      // Create repository
      const createRepoResponse = await fetch('https://api.github.com/user/repos', {
        method: 'POST',
        headers: {
          'Authorization': `token ${this.githubToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: repoName,
          description: `Website generated by FlowForge: ${website.title}`,
          private: false,
          auto_init: true
        })
      })

      if (!createRepoResponse.ok) {
        throw new Error('Failed to create GitHub repository')
      }

      const repo = await createRepoResponse.json()

      // Create index.html file
      const createFileResponse = await fetch(`https://api.github.com/repos/${repo.owner.login}/${repoName}/contents/index.html`, {
        method: 'PUT',
        headers: {
          'Authorization': `token ${this.githubToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: 'Add generated website',
          content: btoa(fullHTML)
        })
      })

      if (!createFileResponse.ok) {
        throw new Error('Failed to create index.html file')
      }

      // Enable GitHub Pages
      const enablePagesResponse = await fetch(`https://api.github.com/repos/${repo.owner.login}/${repoName}/pages`, {
        method: 'POST',
        headers: {
          'Authorization': `token ${this.githubToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          source: {
            branch: 'main'
          }
        })
      })

      return {
        success: true,
        url: `https://${repo.owner.login}.github.io/${repoName}`,
        repositoryUrl: repo.html_url
      }

    } catch (error) {
      console.error('GitHub deployment error:', error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Deployment failed'
      }
    }
  }

  async deployToVercel(website: {
    html: string
    css: string
    js: string
    title: string
  }): Promise<DeploymentResult> {
    try {
      // For now, return a mock Vercel deployment
      // In a real implementation, you would use Vercel's API
      return {
        success: true,
        url: `https://flowforge-${Date.now()}.vercel.app`,
        error: 'Vercel deployment not yet implemented'
      }
    } catch (error) {
      console.error('Vercel deployment error:', error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Vercel deployment failed'
      }
    }
  }

  private generateFullHTML(website: {
    html: string
    css: string
    js: string
    title: string
  }): string {
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${website.title}</title>
    <meta name="description" content="Website generated by FlowForge AI">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>${website.css}</style>
</head>
<body>
    ${website.html}
    <script>${website.js}</script>
</body>
</html>`
  }
}
